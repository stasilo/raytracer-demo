// https://www.moma.org/collection/works/100293?classifications=10&date_begin=Pre-1850&date_end=2019&locale=en&page=3&q=&with_images=1

const randomPointOnCircle = (r, n) => {
    return range(0, n).map(v => {
        const theta = random(Math.PI*2);

        return [
            r * Math.cos(theta),
            r * Math.sin(theta)
        ];
    });
};

const evenlySpacedPointsOnCircle = (r, n) => {
    return range(0, n).map(v => {
        const theta = ((Math.PI*2) / n) * v; //random(Math.PI*2);
        const x = r * Math.cos(theta);
        const z = r * Math.sin(theta);

        return [
            x,
            z,
            theta
        ];
    });
};

scene({
    rendererSettings: {
        realtimeHitDepth: 2,
        hitDepth: 8,
        tMax: 5000,
        maxSphereTracingSteps: 255,
        resolution: 0.5,
        renderMode: 'sdf'
    },
    sdfExportSettings: {
        resolution: 200,
        minCoords: {
            x: -30,
            y: -10,
            z: -30
        },
        maxCoords: {
            x: 30,
            y: 30,
            z: 30
        }
    },
    camera: {
        lookFrom: {x: 71.440, y: 9.687, z: -34.842},
        lookAt: {x: 67.398, y: 9.509, z: -32.838},
        vfov: 45,
        aperture: 1e-8,
        velocity: 1
    },
    background: '#000',
    geometries: [
        sdf(
            opUnionRound({radius: 1, colorBlendAmount: 0.3},
                // ...(randomPointOnCircle(3, 7)
                ...(evenlySpacedPointsOnCircle(8, 10)
                    .map(([x, z, theta]) => {

                        const randOffset = 0; //random(Math.PI / 4);
                        const rotation = theta % Math.PI !== 0 ? {
                                x: theta >= Math.PI
                                    ? degToRad(20)
                                    : degToRad(-20)
                            } : {
                                z: theta === Math.PI
                                    ? degToRad(-20)
                                    : degToRad(20)
                            };

                        return sdfRoundedCone({
                            displacement: 'small-displacement',
                            // material: `lambert-red`,
                            material: 'clearcoat-test',
                            bottomRadius: 3, // + random(0.3),
                            topRadius: 0.8,
                            height: 13,
                            rotation,
                            position: {
                                x: x + randOffset,
                                y: 2,
                                z: z + randOffset
                            },
                        })
                    })
                ),
                // sdfSphere({
                //     displacement: 'sinus-displacement',
                //     material: 'clearcoat-test',
                //     radius: 2,
                //     position: {x: 0, y: 3.5, z: 0},
                // }),
                sdfEllipsoid({
                    domain: {
                        domainOp: 'twist',
                        size: 0.001
                    },
                    // displacement: 'sinus-displacement',
                    material: 'clearcoat-test',
                    // rotation: {
                    //     x: degToRad(110 + randomSign() * random(45)), //0, //random(Math.PI*2),
                    //     y: 0, //0, //degToRad(90), // random(Math.PI*2),
                    //     z: 0,  //0, //random(Math.PI*2)
                    // },
                    rotation: {
                        y: 0, //radToDeg(140)
                        z: radToDeg(random(30) * randomSign())
                    },
                    radius: {
                        x: 8,
                        y: 6,
                        z: 6
                    },
                    position: {x: 0, y: 13, z: 0},
                })
            )
            // |> opSubtract(#,
            //     sdfSphere({
            //         displacement: 'sinus-displacement',
            //         material: 'clearcoat-test',
            //         radius: 2,
            //         position: {x: 0, y: 8, z: 0},
            //     }),
            // )
        ),

        // sdf(
        //     sdfTorus({
        //         // material: 'lambert-red',
        //         material: 'clearcoat',
        //         displacement: 'sinus-displacement',
        //         // dimensions: {x: 5, y: 5, z: 5},
        //         innerRadius: 0.1,
        //         outerRadius: 0.2,
        //         position: {x: 0, y: 0, z: 0},
        //         // texture: {
        //         //     name: 'check',
        //         //     uvScale: 20
        //         // }
        //     }),
        // ),

        plane({
            material: 'floor-white',
            texture: {
                name: 'check',
                uvScale: 20
            },
            scale: 1000,
            position: {
                x: 0,
                y: -1,
                z: 0
            },
        }),
        plane({
            material: 'ceil-light',
            scale: 30,
            position: {
                x: 50,
                y: 80.0,
                z: 0
            },
        }),
        plane({
            material: 'ceil-light',
            scale: 30,
            position: {
                x: -50,
                y: 80.0,
                z: 0
            },
        })
    ],
    displacements: [
        {
            name: 'small-displacement',
            src: `
                float offset = ${glslFloat(random(100))};
                // float d = sin(1.*(p.x+offset)) * sin(1.*(p.y+offset)) * sin(1.*(p.z+offset));
                float d = snoise((p+offset)*0.15);
                dDist = d*0.4;
            `
        },
        {
            name: 'sinus-displacement',
            src: `
                float offset = ${glslFloat(random(100))};
                // float d = sin(1.*(p.x+offset)) * sin(1.*(p.y+offset)) * sin(1.*(p.z+offset));
                float d = snoise((p+offset)*0.6);
                dDist = d*0.3;
            `
        }
    ],
    textures: [
        texture({
            name: 'aluminum',
            url: 'assets/images/displacementMapTest.png'
        }),
        texture({
            name: 'check',
            src: `
                float s = sin(50.*uv.x)*sin(50.*uv.y);
                if(s < 0.) {
                    tColor = vec4(${normedColorStr('#aaaaaa')}, 1.0);
                } else {
                    tColor = vec4(${normedColorStr('#aa0000')}, 1.0);
                }
            `
        })
    ],
    materials: [
        lambertMaterial({
            name: `floor-white`,
            color: '#ffffff',
            albedo: [0.8, 0.8, 0.8]
        }),
        emissiveMaterial({
            name: `ceil-light`,
            color: '#ffffff',
            intensity: 10
        }),
        clearcoatMaterial({
            name: 'clearcoat',
            color: '#ffffff',
            // color: '#101010',
            refIdx: 1.8,
        }),
    ]
});
