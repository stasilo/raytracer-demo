scene({
    rendererSettings: {
        realtimeHitDepth: 2,
        hitDepth: 8,
        tMax: 5000,
        maxSphereTracingSteps: 255,
        resolution: 0.5,
        renderMode: 'sdf'
    },
    camera: {
        lookFrom: {x: -1.340, y: 0.812, z: 6.883},
        lookAt: {x: -0.380, y: 0.222, z: 2.509},
        vfov: 45,
        aperture: 1e-8,
        velocity: 1
    },
    background: '#000',
    sdfExportSettings: {
        resolution: 100,
        minCoords: {x: -2, y: -2, z: -2},
        maxCoords: {x: 2, y: 2, z: 2}
    },
    geometries: [
        sdf(
            sdfSphere({
                material: 'clearcoat',
                displacement: 'sinus-displacement',
                radius: 1,
                position: {x: 0, y: 0, z: 0}
            })
            |> opSubtract(#,
                sdfTorus({
                    innerRadius: 0.5,
                    outerRadius: 1,
                    position: {x: 0, y: 0, z: 0},
                })
            )
        ),
        plane({
            material: 'lambert-mat',
            texture: {
                name: 'check',
                uvScale: 100
            },
            scale: 1000,
            position: {
                x: 0,
                y: -1,
                z: 0
            },
        }),
        plane({
            material: 'emissive-mat',
            scale: 30,
            position: {
                x: 50,
                y: 80.0,
                z: 0
            },
        }),
        plane({
            material: 'emissive-mat',
            scale: 30,
            position: {
                x: -50,
                y: 80.0,
                z: 0
            },
        })
    ],
    displacements: [
        {
            name: 'sinus-displacement',
            src: `
                float offset = ${glslFloat(random(100))};
                // float d = sin(1.*(p.x+offset)) * sin(1.*(p.y+offset)) * sin(1.*(p.z+offset));
                float d = snoise((p+offset)*2.);
                dDist = d*0.1;
            `
        }
    ],
    textures: [
        texture({
            name: 'check',
            src: `
                float s = sin(50.*uv.x)*sin(50.*uv.y);
                if(s < 0.) {
                    tColor = vec4(${normedColorStr('#aaaaaa')}, 1.0);
                } else {
                    tColor = vec4(${normedColorStr('#aa0000')}, 1.0);
                }
            `
        })
    ],
    materials: [
        lambertMaterial({
            name: `lambert-mat`,
            color: '#ffffff',
            albedo: [0.8, 0.8, 0.8]
        }),
        emissiveMaterial({
            name: `emissive-mat`,
            color: '#ffffff',
            intensity: 10
        }),
        clearcoatMaterial({
            name: 'clearcoat',
            color: '#ffffff',
            refIdx: 1.8,
        }),
    ]
});
